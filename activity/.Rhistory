library(ggplot2)
install.packages("ggplot2")
install.packages("shiny")
library(shiny); print(source('C:/Users/Trent/Desktop/app_wUserFileInput.R')$value)
library(shiny)
library(ggplot2)
#Need to have the UI (user interface) and the server instructions
#Use the same template
#setwd("C:/Users/GeislerTD/Desktop/AMRG Work/Shiny")
#data <- read.csv("RAW_RAW.csv")
ui <- fluidPage(
headerPanel("Test Application Using RAT Data"),
sidebarLayout(position = "left",
sidebarPanel(width = 3,
fileInput(inputId = "datafile", label = "Load the RAT_RAW.csv File"),
actionButton(inputId = "go", label = "Process the File", icon= icon("floppy-o")),
uiOutput("filters"),
uiOutput("fy"),
uiOutput("radio"),
uiOutput("action2")
#   selectInput(inputId = "size",
#               label = "Choose a Variable to for the Size of the Bubbles",
#               choices = c("response.1", "leads.1")),
), #end sidebarPanel
mainPanel(
tabsetPanel(
tabPanel("GG Plot", plotOutput(outputId = "gg.bubble", width="100%", height="600px")),
tabPanel("Table Output", tableOutput(outputId = "data.table")),
tabPanel("Secret Sauce", "Still Under Development.  Let me know when you find it.")
)#end tabsetPanel
) #end mainPanel
) #end sidebarLayout
) #end fluidPage
server <- function(input,output){
options(shiny.maxRequestSize=6*1024^2)
#Write intructions to build the output
observeEvent(input$go, {
input.data <- reactive({
input.file <- input$datafile
read.csv(input.file$datapath)
}) #end input.data
#end observeEvent
output$filters <- renderUI({
selectInput(inputId = "filter2",
label = "Plot L2R vs Qualified Lead % by: ",
choices = colnames(input.data()))
}) #end filters
output$fy <- renderUI({
selectInput(inputId = "sub", label = "Choose a Fiscal Year or Fiscal QTR to subset the data",
choices = c("Do not filter", levels(input.data()$FISCAL_YR), unique(input.data()$FISCAL_QTR)))
})#end fy
output$radio <- renderUI({
radioButtons(inputId = "bub.col", label = "Choose your bubble color",
choices = c("blue", "red", "magenta", "black"))
})#end radio
output$action2 <- renderUI({
actionButton(inputId = "go2", label = "Submit Preferences")
}) #end action2
observeEvent(input$go2, {
filter.data <- reactive({
if(input$sub == "Do not filter"){
data <- input.data()
}
else if(substring(input$sub,1,2) == "FY"){
data2 <- subset(input.data(), FISCAL_YR == input$sub)
data <- data2
}
else {
data3 <- subset(input.data(), FISCAL_QTR == input$sub)
data <- data3
}
qualified <- subset(data, Resp.CAT == "Qualified")
t1.t2 <- subset(data, Tier_Markets == "Tier I" | Tier_Markets == "Tier II")
r.names <- aggregate(data$Responses, by = list(filter= data[,input$filter2]), sum)[,1]
response.1 <- aggregate(data$Responses, by = list(filter= data[,input$filter2]), sum)$x
leads.1 <- aggregate(data$LEADS_Actual, by = list(filter= data[,input$filter2]), sum)$x
qualified.1 <- aggregate(qualified$LEADS_Actual, by = list(filter = qualified[,input$filter2]), sum)$x
t1.t2.1 <- aggregate(t1.t2$Responses, by = list(filter = t1.t2[,input$filter2]), sum)$x
pq <- qualified.1/response.1
l2r <- t1.t2.1/response.1
df <- as.data.frame(cbind(response.1, t1.t2.1, qualified.1, l2r, pq))
rownames(df) <- r.names
colnames(df) <- c("Response", "Tier1_Tier2", "Qualified_Leads", "TI_TII2R", "QL2R")
df
})
output$gg.bubble <- renderPlot({
data2 <- filter.data()
#plot(data2[,"l2r"], data2[,"pq"])
ggplot(data = data2, aes(x= data2[,"QL2R"], y= data2[,"TI_TII2R"])) +
geom_point(aes(size=Response), col=input$bub.col, alpha=1/3) +
#geom_text("label", x="Percent Qualified", y="Tier 1 and 2 Percent")+# Plot points
scale_size_continuous(range=c(2,20)) +
#scale_alpha_manual(alpha) +
annotate("text", x= data2[,"QL2R"], y= data2[,"TI_TII2R"], label=rownames(data2), size=4, angle=0, check_overlap=F)+
theme(legend.position = "bottom") +
labs(title = "Percent in Tier I and II vs QL2R by Selected Variable")+
ylab("Percent of Responses in Tier I and Tier II") +
xlab("Percent Qualified to Total Responses")
#geom_hline(yintercept = sum(data$LEADS_Actual)/sum(data$Responses)) +
#geom_vline(xintercept = sum(qualified$LEADS_Actual)/sum(data$LEADS_Actual))
})
output$data.table <- renderTable({filter.data()})
})#end observeEvent on go2
}) #end observeEvent on go
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Trent/Desktop')
galaxy <- function(x){
x * 5
}
galaxy(2)
galaxy(6)
galaxy <- function(x){
x * 50 /100 + 623 -8
}
galaxy(200)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
head(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = .5)
table(trainIndicator)
tranSpam <- spam[trainIndicator == 1, ]
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSp)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
windows()
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] +1))
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction <- function(x , y) sum(x != (y > .5))
cvError <- rep(NA, 55)
library(boot)
for(i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = 'numType')
glmFit = glm(lmFormula, family = 'binomial', data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}#end for statement
names(trainSpam)[which.min(cvError)]
getwd()
setwd("C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1")
setwd("C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1/activity")
setwd("C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1/activity")
act <- read.csv('activity.csv')
dir
dir()
setwd("C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1/activity")
act <- read.csv('activity.csv')
act <- read.csv('activity.csv')
dir()
knitr::opts_chunk$set(echo = TRUE, root.dir = "C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1/activity" )
act <- read.csv('activity.csv')
setwd("C:/Users/Trent/Desktop/Data Science Specialization/Course 5 - Reproducible/RepData_PeerAssessment1/activity")
act <- read.csv('activity.csv')
act <- read.csv('activity')
act <- read.csv('activity.csv')
dir
dir()
act <- read.csv('activity.csv')
